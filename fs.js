import { ensureDir, readFileStr, writeFileStr, walk, exists } from "https://deno.land/std@0.51.0/fs/mod.ts";

const tempTemplate = `#!/bin/sh
# generated by bs 'create script' 
`;


export const bashProfilePath = `${Deno.env.get('HOME')}/.bash_profile`;

const bsHome = `${Deno.env.get('HOME')}/.bs`;
const bsBin = `${bsHome}/bin`;
const bsBinGlobals = `${bsBin}/global`;
const bsBinProjects = `${bsBin}/project`;
const bsBinProject = (projectName) => `${bsBinProjects}/${projectName}`;

const bsAlias = `${bsHome}/alias`;
const bsAliasGlobals = `${bsAlias}/global`;
const bsAliasProjects = `${bsAlias}/project`;
const bsAliasProject = (projectName) => `${bsAliasProjects}/${projectName}`;
const bsAliasMain = (aliasDir) => `${aliasDir}/main.sh`;

export const createAliasFilePath = (dir, name) => `${dir}/${name}.sh`;
export const createAliasStr = (name, command) => `alias ${name}="${command}"`;

export const toSourceString = (filePath) => `source ${filePath}`;

export const paths = {
  root: bsHome,
  bin: {
    root: bsBin,
    globals: bsBinGlobals,
    projects: bsBinProjects,
    project: bsBinProject,
  },
  alias: {
    root: bsAlias,
    globals: bsAliasGlobals,
    projects: bsAliasProjects,
    project: bsAliasProject,
    main: bsAliasMain,
  },
};

export async function ensureBs() {
  await ensureDir(bsBinGlobals);
  await ensureDir(bsBinProjects);
  await ensureDir(bsAliasGlobals);
  await ensureDir(bsAliasProjects);
  return true;
}

export async function upsertFolderMain(aliasDir) {
  const aliases = [];
  const mainPath = bsAliasMain(aliasDir);
  for await (const entry of walk(aliasDir)) {
    if (entry && entry.isFile && entry.name !== 'main.sh') {
      const alias = await readFileStr(`${aliasDir}/${entry.name}`, { encoding: 'utf8' });
      aliases.push(alias);
    }
  }
  await writeFileStr(mainPath, aliases.join('\n'));
  return mainPath;
}

export async function getFileNames(dir, includeMain) {
  const fileNames = [];
  for await (const entry of walk(dir)) {
    if (entry.isFile && (!includeMain && !entry.name.includes('main.sh'))) {
      fileNames.push(entry.name);
    }
  }
  return fileNames;
}

export async function updateBashProfile(source) {
  const org = await readFileStr(bashProfilePath, { encoding: 'utf8' });
  if (org.includes(source)) {
    return true;
  }
  return writeFileStr(bashProfilePath, `${org}\n${source}\n`);
}

export async function createAliasFile(dir, name, command) {
  const filePath = createAliasFilePath(dir, name);
  const aliasString = createAliasStr(name, command);

  await writeFileStr(filePath, aliasString);
  return {
    filePath,
    aliasString,
  };
}

export async function ensureProjectDir(projectPathFn, projectName) {
  const projectPath = projectPathFn(projectName);
  await ensureDir(projectPath);
  return projectPath;
}

export function createScript(name, projectPath) {
  const filePath = `${projectPath}/${name}`;
  return writeFileStr(filePath, tempTemplate);
}

export async function getScriptPath(name, projectPath) {
  const filePath = `${projectPath}/${name}`;
  const doesExists = await exists(filePath);
  return doesExists ? filePath : null;
}

export async function getProjectDir(projectPathFn) {
  const getGitRemote = Deno.run({
    cmd: ['git', 'remote', '-v'],
    stdout: "piped",
    stderr: "piped",
  });
  const { code } = await getGitRemote.status();
  if (code === 0) {
    const rawOutput = await getGitRemote.output();
    const gitRemoteString = new TextDecoder().decode(rawOutput);
    // TODO: regEx
    const projectName = gitRemoteString.split('\n')[0]
      .replace('origin\t', '')
      .replace('(fetch)', '')
      .replace(' ', '')
      .replace('.git', '');

    const projectPath = await ensureProjectDir(projectPathFn, projectName);
    return projectPath;
  } else {
    const errorString = new TextDecoder().decode(rawError);
    logger.error(errorString);
    throw new Error('Unable to get the git remote Origin');
  }
}